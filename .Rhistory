mu <- sapply( weight.seq , mu.link )
dim(mu) #same rows as iterations; same column as sequence
#calculate mean and HDPI
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI , prob=0.89 )
#plot
plot( height ~ weight , data=d , col=col.alpha(rangi2,0.5) ) # plot raw data
lines( weight.seq , mu.mean ) # plot the posterior regression line
shade( mu.PI , weight.seq ) # plot a shaded region for 89% HPDI
mu.link <- function(weight) posterior$a + posterior$b*( weight - xbar )
weight.seq <- seq( from=25 , to=70 , by=1 )
mu <- sapply( weight.seq , mu.link )
#dim(mu) #number of rows = number of samples; # of columns = number of observations in sequence
#calculate mean and HDPI
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI , prob=0.89 )
#plot
plot( height ~ weight , data=d , col=col.alpha(rangi2,0.5) ) # plot raw data
lines( weight.seq , mu.mean ) # plot the posterior regression line
shade( mu.PI , weight.seq ) # plot a shaded region for 89% HPDI
mu.link <- function(weight) posterior$a + posterior$b*( weight - xbar )
weight_80 <- 80
mu_80 <- sapply( weight_80 , mu.link )
#calculate mean and HDPI
mu.80.mean <- apply( mu_80 , 2 , mean )
mu.80.PI <- apply( mu_80 , 2 , PI , prob=0.89 )
#plot
plot(density(mu_80), main = "Mu at 80")
shade(density(mu_80), c(mu.80.PI[[1]], mu.80.PI[[2]]))
abline(v=mu.80.mean)
weight.seq <- 25:70
sim.height <- sapply( weight.seq , function(weight) #see function below
rnorm(
n=nrow(posterior) ,
mean=posterior$a + posterior$b*( weight - xbar ) ,
sd=posterior$sigma )
)
#summary stats
height.PI <- apply( sim.height , 2 , PI , prob=0.89 ) #you can also use quartile
height.mean <- apply( sim.height , 2 , mean , prob=0.89 )
#
plot( height ~ weight , d, col=col.alpha(rangi2,0.5), main="Prediction Interval" ) #plot data
lines( weight.seq , height.mean ) # regression line
shade( height.PI , weight.seq ) # prediction interval
shade( mu.PI , weight.seq ) # confidence interval
weight.80 <- 80
y_80_sim <- sapply( weight.80 , function(weight)
rnorm(
n=nrow(posterior) ,
mean=posterior$a + posterior$b*( weight - xbar ) ,
sd=posterior$sigma ) )
#calculate mean and HDPI
y.80.mean <- apply( y_80_sim , 2 , mean )
y.80.PI <- apply( y_80_sim , 2 , PI , prob=0.89 )
#plot
plot(density(y_80_sim), main = "Y at 80")
shade(density(y_80_sim), c(y.80.PI[[1]], y.80.PI[[2]]))
abline(v=y.80.mean)
install.packages("HDInterval")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(rethinking)
library(rstan)
setwd("./3. Multivariate Continuous")
data(WaffleDivorce)
d <- WaffleDivorce
median_age_marriage <- as.numeric(d$MedianAgeMarriage)
divorce <- as.numeric(d$Divorce)
N <- length(d$Divorce)
state_marriage_proportion <- as.numeric(d$Marriage) #proportion
stan_rdump(c("divorce", "median_age_marriage", "N", "state_marriage_proportion"), file="linear_reg.data.R")
data <- read_rdump("linear_reg.data.R")
setwd("./3. Multivariate Continuous")
writeLines(readLines("stan_model.stan"))
setwd("./3. Multivariate Continuous")
fit <- stan(file='stan_model.stan', data=data, seed=194838, chains = 1, warmup=1000, iter=10000)
setwd("./3. Multivariate Continuous")
data(WaffleDivorce)
d <- WaffleDivorce
median_age_marriage <- as.numeric(d$MedianAgeMarriage)
divorce <- as.numeric(d$Divorce)
N <- length(d$Divorce)
state_marriage_proportion <- as.numeric(d$Marriage) #proportion
stan_rdump(c("divorce", "median_age_marriage", "N", "state_marriage_proportion"), file="linear_reg.data.R")
data <- read_rdump("linear_reg.data.R")
setwd("./3. Multivariate Continuous")
writeLines(readLines("stan_model.stan"))
setwd("./3. Multivariate Continuous")
fit <- stan(file='stan_model.stan', data=data, seed=194838, chains = 1, warmup=1000, iter=10000)
setwd("./3. Multivariate Continuous")
writeLines(readLines("stan_model2.stan"))
setwd("./3. Multivariate Continuous")
writeLines(readLines("stan_model2.stan"))
fit2 <- stan(file='stan_model2.stan', data=data, seed=194838, chains = 1, warmup=1000, iter=10000)
setwd("./3. Multivariate Continuous")
writeLines(readLines("stan_model2.stan"))
fit2 <- stan(file='stan_model2.stan', data=data, seed=194838, chains = 1, warmup=1000, iter=10000)
posterior2 <- as.data.frame(fit2)
#create link function
mu.link <- function(x) posterior2$a + posterior2$bA*(x)
mu <- sapply(as.numeric(scale(d$MedianAgeMarriage)), mu.link)
#summary stasitics for median
mu_mean <- apply(mu, 2, mean)
mu_resid <- as.numeric(scale(d$Marriage)) - mu_mean
mu.PI <- apply( mu , 2 , HPDI , prob=0.89 )
#plot
plot(as.numeric(scale(d$Divorce)) ~ mu_resid, main = 'Predictor Residual Plot', xlab="Marriage rate residuals", ylab = "Divorce Rate (std)")
abline(lm(as.numeric(scale(d$Divorce)) ~ mu_resid), col = 'red') #x not specified... weird...
shade( mu.PI , as.numeric(scale(d$MedianAgeMarriage)) ) # plot a shaded region for 89% HPDI
abline(v = 0)
plot(as.numeric(scale(d$Divorce)) ~ mu_resid, main = 'Predictor Residual Plot', xlab="Marriage rate residuals", ylab = "Divorce Rate (std)")
abline(lm(as.numeric(scale(d$Divorce)) ~ mu_resid), col = 'red') #x not specified... weird...
shade( mu.PI , as.numeric(scale(d$Marriage)) ) # plot a shaded region for 89% HPDI
abline(v = 0)
plot(as.numeric(scale(d$Divorce)) ~ mu_resid, main = 'Predictor Residual Plot', xlab="Marriage rate residuals", ylab = "Divorce Rate (std)")
abline(lm(as.numeric(scale(d$Divorce)) ~ mu_resid), col = 'red') #x not specified... weird...
shade( mu.PI , as.numeric(scale(d$MedianAgeMarriage)) ) # plot a shaded region for 89% HPDI
abline(v = 0, lty = 2)
mu.PI <- apply( mu , 2 , HPDI , prob=0.5 )
plot(as.numeric(scale(d$Divorce)) ~ mu_resid, main = 'Predictor Residual Plot', xlab="Marriage rate residuals", ylab = "Divorce Rate (std)")
abline(lm(as.numeric(scale(d$Divorce)) ~ mu_resid), col = 'red') #x not specified... weird...
shade( mu.PI , as.numeric(scale(d$MedianAgeMarriage)) ) # plot a shaded region for 89% HPDI
abline(v = 0, lty = 2)
plot(as.numeric(scale(d$Divorce)) ~ mu_resid, main = 'Predictor Residual Plot', xlab="Marriage rate residuals", ylab = "Divorce Rate (std)")
abline(lm(as.numeric(scale(d$Divorce)) ~ mu_resid), col = 'red') #x not specified... weird...
shade( mu.PI , mu_resid ) # plot a shaded region for 89% HPDI
abline(v = 0, lty = 2)
plot(as.numeric(scale(d$Divorce)) ~ mu_resid, main = 'Predictor Residual Plot', xlab="Marriage rate residuals", ylab = "Divorce Rate (std)")
abline(lm(as.numeric(scale(d$Divorce)) ~ mu_resid), col = 'red') #x not specified... weird...
shade( mu.PI , as.numeric(scale(d$MedianAgeMarriage)) ) # plot a shaded region for 89% HPDI
abline(v = 0, lty = 2)
mu.PI <- apply( mu , 2 , HPDI , prob=0.9 )
#plot
plot(as.numeric(scale(d$Divorce)) ~ mu_resid, main = 'Predictor Residual Plot', xlab="Marriage rate residuals", ylab = "Divorce Rate (std)")
abline(lm(as.numeric(scale(d$Divorce)) ~ mu_resid), col = 'red') #x not specified... weird...
shade( mu.PI , as.numeric(scale(d$MedianAgeMarriage)) ) # plot a shaded region for 89% HPDI
abline(v = 0, lty = 2)
posterior <- as.data.frame(fit)
mu.link <- function(A, M) posterior$a + posterior$bA*(A) + posterior$bM * M
# prepare new counterfactual data
M_seq <- seq( from=-2 , to=3 , length.out=30 )
pred_data <- data.frame( M = M_seq , A = 0 )
#compute counterfactual mean divorce (mu)
mu <- mapply(mu.link, M = pred_data$M, A = pred_data$A) #note use of mapply
mu_mean <- apply( mu , 2 , median )
mu_PI <- apply( mu , 2 , PI )
#compute counterfactual predicted divorce (y)
sim.response <- mapply(function(A, M)
rnorm(
n=nrow(posterior) ,
mean=posterior$a + posterior$bA*(A) + posterior$bM * M,
sd=posterior$sigma ), M = pred_data$M, A = pred_data$A   )
#summary stats
dim(sim.response)
D_PI <- apply( sim.response , 2 , PI , prob=0.89 ) #you can also use quartile
# display predictions, hiding raw data with type="n"
plot( as.numeric(scale(d$Divorce)) ~ as.numeric(scale(d$Marriage)) , data=d , type="n",
xlab = "Marriage rate (standardized)", ylab = "Divorce rate (standardized)")
mtext( "Median age marriage (std) = 0" )
lines( M_seq , mu_mean )
shade( mu_PI , M_seq )
shade( D_PI , M_seq )
posterior <- as.data.frame(fit)
mu.link <- function(A, M) posterior$a + posterior$bA*(A) + posterior$bM * M
# prepare new counterfactual data
M_seq <- seq( from=-2 , to=3 , length.out=30 )
pred_data <- data.frame( M = M_seq , A = 0 )
#compute counterfactual mean divorce (mu)
mu <- mapply(mu.link, M = pred_data$M, A = pred_data$A) #note use of mapply
mu_mean <- apply( mu , 2 , median )
mu_PI <- apply( mu , 2 , PI )
#compute counterfactual predicted divorce (y)
sim.response <- mapply(function(A, M)
rnorm(
n=nrow(posterior) ,
mean=posterior$a + posterior$bA*(A) + posterior$bM * M,
sd=posterior$sigma ), M = pred_data$M, A = pred_data$A   )
D_PI <- apply( sim.response , 2 , PI , prob=0.89 ) #you can also use quartile
# display predictions, hiding raw data with type="n"
plot( as.numeric(scale(d$Divorce)) ~ as.numeric(scale(d$Marriage)) , data=d , type="n",
xlab = "Marriage rate (standardized)", ylab = "Divorce rate (standardized)")
mtext( "Median age marriage (std) = 0" )
lines( M_seq , mu_mean )
shade( mu_PI , M_seq )
shade( D_PI , M_seq )
posterior <- as.data.frame(fit)
mu.link <- function(A, M) posterior$a + posterior$bA*(A) + posterior$bM * M
# prepare new counterfactual data
M_seq <- seq( from=-2 , to=3 , length.out=30 )
pred_data <- data.frame( M = M_seq , A = 0 )
#compute counterfactual expected divorce rate (mu)
mu <- mapply(mu.link, M = pred_data$M, A = pred_data$A) #note use of mapply
mu_mean <- apply( mu , 2 , median )
mu_PI <- apply( mu , 2 , PI )
#compute counterfactual predicted divorce rate (y)
sim.response <- mapply(function(A, M)
rnorm(
n=nrow(posterior) ,
mean=posterior$a + posterior$bA*(A) + posterior$bM * M,
sd=posterior$sigma ), M = pred_data$M, A = pred_data$A   )
D_PI <- apply( sim.response , 2 , PI , prob=0.89 )
# display predictions, hiding raw data with type="n"
plot( as.numeric(scale(d$Divorce)) ~ as.numeric(scale(d$Marriage)) , data=d ,
xlab = "Marriage rate (standardized)", ylab = "Divorce rate (standardized)")
mtext( "Median age marriage (std) = 0" )
lines( M_seq , mu_mean )
shade( mu_PI , M_seq )
shade( D_PI , M_seq )
posterior <- as.data.frame(fit)
mu.link <- function(A, M) posterior$a + posterior$bA*(A) + posterior$bM * M
# prepare new counterfactual data
M_seq <- seq( from=-2 , to=3 , length.out=30 )
pred_data <- data.frame( M = M_seq , A = 0 )
#compute counterfactual expected divorce rate (mu)
mu <- mapply(mu.link, M = pred_data$M, A = pred_data$A) #note use of mapply
mu_mean <- apply( mu , 2 , median )
mu_PI <- apply( mu , 2 , PI )
#compute counterfactual predicted divorce rate (y)
sim.response <- mapply(function(A, M)
rnorm(
n=nrow(posterior) ,
mean=posterior$a + posterior$bA*(A) + posterior$bM * M,
sd=posterior$sigma ), M = pred_data$M, A = pred_data$A   )
D_PI <- apply( sim.response , 2 , PI , prob=0.89 )
# display predictions, hiding raw data with type="n"
plot( as.numeric(scale(d$Divorce)) ~ as.numeric(scale(d$Marriage)) , data=d,
xlab = "Marriage rate (standardized)", ylab = "Divorce rate (standardized)")
mtext( "Counterfactual Effect of Proportion Married on Divorce Rate" )
lines( M_seq , mu_mean )
shade( mu_PI , M_seq )
shade( D_PI , M_seq )
mu.link <- function(A, M) posterior$a + posterior$bA*(A) + posterior$bM * M
#using original data
mu <- mapply(mu.link, M = as.numeric(scale(d$Marriage)), A= as.numeric(scale(d$MedianAgeMarriage))) #note use of mapply
mu_mean <- apply( mu , 2 , mean )
mu_PI <- apply( mu , 2 , PI )
# simulate observations
# again no new data, so uses original data
sim.response <- mapply(function(A, M)
rnorm(
n=nrow(posterior) ,
mean=posterior$a + posterior$bA*(A) + posterior$bM * M,
sd=posterior$sigma ), M = as.numeric(scale(d$Marriage)), A = as.numeric(scale(d$MedianAgeMarriage))   )
#summary stats
D_PI <- apply( sim.response , 2 , PI , prob=0.89 ) #you can also use quartile
#plot
plot( mu_mean ~ as.numeric(scale(d$Divorce)) , col=rangi2 , ylim=range(mu_PI) ,
xlab="Observed divorce" , ylab="Predicted divorce" )
abline( a=0 , b=1 , lty=2 )
for ( i in 1:nrow(d) ) lines( rep(scale(d$Divorce)[i],2) , mu_PI[,i] , col=rangi2 )
mu.link <- function(A, M) posterior$a + posterior$bA*(A) + posterior$bM * M
#using original data
mu <- mapply(mu.link, M = as.numeric(scale(d$Marriage)), A= as.numeric(scale(d$MedianAgeMarriage))) #note use of mapply
mu_mean <- apply( mu , 2 , mean )
mu_PI <- apply( mu , 2 , PI )
# simulate observations
# again no new data, so uses original data
sim.response <- mapply(function(A, M)
rnorm(
n=nrow(posterior) ,
mean=posterior$a + posterior$bA*(A) + posterior$bM * M,
sd=posterior$sigma ), M = as.numeric(scale(d$Marriage)), A = as.numeric(scale(d$MedianAgeMarriage))   )
#summary stats
D_PI <- apply( sim.response , 2 , PI , prob=0.89 ) #you can also use quartile
#plot
plot( mu_mean ~ as.numeric(scale(d$Divorce)) , col=rangi2 , ylim=range(mu_PI) ,
xlab="Observed divorce" , ylab="Predicted divorce" )
abline( a=0 , b=1 , lty=2 )
for ( i in 1:nrow(d) ) lines( rep(scale(d$Divorce)[i],2) , mu_PI[,i] , col=rangi2 )
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(rethinking)
library(rstan)
setwd("./5. Single Categorical")
data(milk)
d <- milk
unique(d$clade)
clade_id <- as.integer(d$clade) #convert categorical variable to integer
N <- length(clade_id)
N_clade_id <- length(unique(clade_id))
K <- scale(d$kcal.per.g)
K <- as.numeric(K)
stan_rdump(c("clade_id", "N_clade_id", "N", "K"), file="linear_reg.data.R")
data <- read_rdump("linear_reg.data.R")
setwd("./5. Single Categorical")
writeLines(readLines("categorical.stan"))
setwd("./5. Single Categorical")
writeLines(readLines("categorical.stan"))
setwd("./5. Single Categorical")
fit <- stan(file='categorical.stan', data=data, seed=194838, chains = 1, warmup=1000, iter=10000)
posterior <- as.data.frame(fit)
print(fit, c("sigma", "a"))
plot(fit, pars = c("a", "sigma"), ci_level = .8, outer_level = 0.95, show_density = TRUE) +
ggtitle("Posterior Distribution of Coefficients")
print(fit, c("sigma", "a"))
plot(fit, pars = c("a", "sigma"), ci_level = .8, outer_level = 0.95, show_density = TRUE) +
ggtitle("Posterior Distribution of Coefficients")
setwd("./13. Multi-Level Models")
data(reedfrogs)
d <- reedfrogs
surv <- d$surv
density <- d$density
tank <- 1:nrow(d)
N = nrow(d)
N_tank = nrow(d)
stan_rdump(c("N", "N_tank", "surv", "density", "tank"), file="linear_reg.data.R")
data <- read_rdump("linear_reg.data.R")
setwd("./13. Multi-Level Models")
writeLines(readLines("m12_1.stan"))
setwd("./13. Multi-Level Models")
writeLines(readLines("stan_script.stan"))
post <- as.data.frame(fit)
# compute median intercept for each tank
# also transform to probability with logistic
d$propsurv.est <- logistic( apply( post$a_tank , 2 , median ) )
setwd("./13. Multi-Level Models")
data(reedfrogs)
d <- reedfrogs
surv <- d$surv
density <- d$density
tank <- 1:nrow(d)
N = nrow(d)
N_tank = nrow(d)
stan_rdump(c("N", "N_tank", "surv", "density", "tank"), file="linear_reg.data.R")
data <- read_rdump("linear_reg.data.R")
setwd("./13. Multi-Level Models")
writeLines(readLines("m12_1.stan"))
setwd("./13. Multi-Level Models")
writeLines(readLines("stan_script.stan"))
setwd("./13. Multi-Level Models")
fit <- stan(file='stan_script.stan', data=data, chains = 1, warmup=1000, iter=10000)
post <- as.data.frame(fit)
# compute median intercept for each tank
# also transform to probability with logistic
d$propsurv.est <- logistic( apply( post$a_tank , 2 , median ) )
View(post)
# compute median intercept for each tank
# also transform to probability with logistic
d$propsurv.est <- logistic( apply( post, 2 , median ) )
# compute median intercept for each tank
# also transform to probability with logistic
TEMP<- logistic( apply( post, 2 , median ) )
TEMP <- c(1:48)
# display raw proportions surviving in each tank
plot( TEMP , ylim=c(0,1) , pch=16 , xaxt="n" ,
xlab="tank" , ylab="proportion survival" , col=rangi2 )
# compute median intercept for each tank
# also transform to probability with logistic
TEMP<- logistic( apply( post, 2 , median ) )
TEMP <- TEMP[,c(1:48)]
TEMP <- TEMP[,1:48]
TEMP <- TEMP[1:48]
# display raw proportions surviving in each tank
plot( TEMP , ylim=c(0,1) , pch=16 , xaxt="n" ,
xlab="tank" , ylab="proportion survival" , col=rangi2 )
plot( TEMP , ylim=c(0,1) , pch=16 , xaxt="n" ,
xlab="tank" , ylab="proportion survival" , col=rangi2 )
axis( 1 , at=c(1,16,32,48) , labels=c(1,16,32,48) )
# overlay posterior medians
points( d$propsurv.est )
plot( TEMP , ylim=c(0,1) , pch=16 , xaxt="n" ,
xlab="tank" , ylab="proportion survival" , col=rangi2 )
axis( 1 , at=c(1,16,32,48) , labels=c(1,16,32,48) )
# overlay posterior medians
points( d$propsurv.est )
View(d)
setwd("./13. Multi-Level Models")
data(reedfrogs)
d <- reedfrogs
surv <- d$surv
density <- d$density
tank <- 1:nrow(d)
N = nrow(d)
N_tank = nrow(d)
stan_rdump(c("N", "N_tank", "surv", "density", "tank"), file="linear_reg.data.R")
data <- read_rdump("linear_reg.data.R")
View(d)
setwd("./13. Multi-Level Models")
fit <- stan(file='stan_script.stan', data=data, chains = 1, warmup=1000, iter=10000)
post <- as.data.frame(fit)
# compute median intercept for each tank
# also transform to probability with logistic
TEMP<- logistic( apply( post, 2 , median ) )
TEMP <- TEMP[1:48]
# display raw proportions surviving in each tank
plot( TEMP , ylim=c(0,1) , pch=16 , xaxt="n" ,
xlab="tank" , ylab="proportion survival" , col=rangi2 )
axis( 1 , at=c(1,16,32,48) , labels=c(1,16,32,48) )
# overlay posterior medians
points( d$propsurv.est )
# mark posterior median probability across tanks
abline( h=logistic(median(post$a)) , lty=2 )
# draw vertical dividers between tank densities
abline( v=16.5 , lwd=0.5 )
abline( v=32.5 , lwd=0.5 )
text( 8 , 0 , "small tanks" )
text( 16+8 , 0 , "medium tanks" )
text( 32+8 , 0 , "large tanks" )
# compute median intercept for each tank
# also transform to probability with logistic
TEMP<- logistic( apply( post, 2 , median ) )
TEMP <- TEMP[1:48]
# display raw proportions surviving in each tank
plot( TEMP , ylim=c(0,1) , pch=16 , xaxt="n" ,
xlab="tank" , ylab="proportion survival" , col=rangi2 )
axis( 1 , at=c(1,16,32,48) , labels=c(1,16,32,48) )
# overlay posterior medians
points( d$propsurv)
# mark posterior median probability across tanks
abline( h=logistic(median(post$a)) , lty=2 )
# draw vertical dividers between tank densities
abline( v=16.5 , lwd=0.5 )
abline( v=32.5 , lwd=0.5 )
text( 8 , 0 , "small tanks" )
text( 16+8 , 0 , "medium tanks" )
text( 32+8 , 0 , "large tanks" )
# display raw proportions surviving in each tank
plot( d$propsurv , ylim=c(0,1) , pch=16 , xaxt="n" ,
xlab="tank" , ylab="proportion survival" , col=rangi2 )
axis( 1 , at=c(1,16,32,48) , labels=c(1,16,32,48) )
# compute median intercept for each tank
# also transform to probability with logistic
TEMP<- logistic( apply( post, 2 , median ) )
TEMP <- TEMP[1:48]
# overlay posterior medians
points( d$propsurv)
# mark posterior median probability across tanks
abline( h=logistic(median(post$a)) , lty=2 )
# draw vertical dividers between tank densities
abline( v=16.5 , lwd=0.5 )
abline( v=32.5 , lwd=0.5 )
text( 8 , 0 , "small tanks" )
text( 16+8 , 0 , "medium tanks" )
text( 32+8 , 0 , "large tanks" )
# display raw proportions surviving in each tank
plot( d$propsurv , ylim=c(0,1) , pch=16 , xaxt="n" ,
xlab="tank" , ylab="proportion survival" , col=rangi2 )
axis( 1 , at=c(1,16,32,48) , labels=c(1,16,32,48) )
# compute median intercept for each tank
# also transform to probability with logistic
TEMP<- logistic( apply( post, 2 , median ) )
TEMP <- TEMP[1:48]
# overlay posterior medians
points( TEMP)
# mark posterior median probability across tanks
abline( h=logistic(median(post$a)) , lty=2 )
# draw vertical dividers between tank densities
abline( v=16.5 , lwd=0.5 )
abline( v=32.5 , lwd=0.5 )
text( 8 , 0 , "small tanks" )
text( 16+8 , 0 , "medium tanks" )
text( 32+8 , 0 , "large tanks" )
plot( NULL , xlim=c(-3,4) , ylim=c(0,0.35) ,
xlab="log-odds survive" , ylab="Density" )
for ( i in 1:100 )
curve( dnorm(x,post$a[i],post$sigma[i]) , add=TRUE ,
col=col.alpha("black",0.2) )
# sample 8000 imaginary tanks from the posterior distribution
sim_tanks <- rnorm( 8000 , post$a , post$sigma )
# show first 100 populations in the posterior
plot( NULL , xlim=c(-3,4) , ylim=c(0,0.35) ,
xlab="log-odds survive" , ylab="Density" )
for ( i in 1:100 )
curve( dnorm(x,post$a[i],post$sigma[i]) , add=TRUE ,
col=col.alpha("black",0.2) )
# sample 8000 imaginary tanks from the posterior distribution
sim_tanks <- rnorm( 8000 , post$a , post$sigma )
# transform to probability and visualize
dens( logistic(sim_tanks) , xlab="probability survive" )
library(rethinking)
data(chimpanzees)
d <- chimpanzees
d$recipient <- NULL
# prep data 13.23
d$block_id <- d$block # name 'block' is reserved by Stan
m12.5 <- map2stan(
alist(
pulled_left ~ dbinom( 1 , p ),
logit(p) <- a + a_actor[actor] + a_block[block_id] +
(bp + bpc*condition)*prosoc_left,
a_actor[actor] ~ dnorm( 0 , sigma_actor ),
a_block[block_id] ~ dnorm( 0 , sigma_block ),
c(a,bp,bpc) ~ dnorm(0,10),
sigma_actor ~ dcauchy(0,1),
sigma_block ~ dcauchy(0,1)
) ,
data=d, warmup=1000 , iter=6000 , chains=4 , cores=3 )
stancode(m12.5)
setwd("./13. Multi-Level Models")
data(reedfrogs)
d <- reedfrogs
surv <- d$surv
density <- d$density
tank <- 1:nrow(d)
N = nrow(d)
N_tank = nrow(d)
stan_rdump(c("N", "N_tank", "surv", "density", "tank"), file="linear_reg.data.R")
data <- read_rdump("linear_reg.data.R")
View(d)
plot( NULL , xlim=c(-3,4) , ylim=c(0,0.35) ,
xlab="log-odds survive" , ylab="Density" )
for ( i in 1:100 )
curve( dnorm(x,post$a[i],post$sigma[i]) , add=TRUE ,
col=col.alpha("black",0.2) )
# show first 100 populations in the posterior
plot( NULL , xlim=c(-3,4) , ylim=c(0,0.35) ,
xlab="log-odds survive" , ylab="Density" )
for ( i in 1:100 )
curve( dnorm(x,post$a[i],post$sigma[i]) , add=TRUE ,
col=col.alpha("black",0.2) )
# sample 8000 imaginary tanks from the posterior distribution
sim_tanks <- rnorm( 8000 , post$a , post$sigma )
# transform to probability and visualize
dens( logistic(sim_tanks) , xlab="probability survive" )
